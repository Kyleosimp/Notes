SOLID
	Single REsponsibility Principle (SIP)
	
		States that modules, classes, and methods should only have the responsibility of serving just one functionality
		
		Makes code:
			Cohesive and reusable
			
		Classes that violate SIP are found to have high cychomatic complexity, meaning low testability
		
	Open-Closed Principle (OCP)
	
		States that classes are open for extension but closed for modification
		meaning:
		core classes of Spring Web MVC should consist of methods that are marked as final
		
	Liskov Substitution Principle (LSP) 
	
		Means that if a child class is derived from a parent class, the object of the parent class can be substituted
		with an object of the child class without changing any of the properties of the parent class
		
		example:
			an object of the class Rectangle can be substituted with an object class Square
			
	Interface Segregation Principle (ISP)
		
		states that the large interfaces with a large number of api definitions should be split into smaller interfaces
		definining a set of cohesive APIs
		
	Dependency Inversion Principle (DIP)
	
		Related to the IOC principle down below vvvvv

Inversion of Control (IOC)
	also known as Dependency Injection
	
	"Don't call us, we'll call you"
	
	Dependencies are appropriately made available to the classes during runtime and classes focus exclusively
	on delivering functionality 
	
	NOT  classes creating dependencies AND delivering functionality
	
Spring IOC Container
	A framework that manages the life cycle of POJOs and injects them into the application as required
	
	How do Java objects define their dependencies?
	
		1. Dependencies are passed as arguments to the constructor method of the object
		example:
			private Shape shape;
		
			public DrawWithIOC(Shape shape){
				this.shape = shape;
			}
		2. Dependencies are passed as arguments to the setter method of the object
		
		3. Dependencies are passed as arguments to a factory method of the object
		
	A Spring IOC container injects the dependencies AFTER it creates the beans; meaning that they are no longer
	managed by Java objects.
		core packages to the IOC container:
			org.springframework.beans
			org.springframework.context
	JSON/XML represents Configuration Metadata
	
	Spring Web MVC
		Dispatcher servlet
		
			'front controller'
			
			determines which controller class and method needs to be called upon request
			sends the response using the appropriate page or obejcts
			
		Handler Mappings
			
			Used to map the request URL with appropriate handlers such as controllers
			
			the dispatcher servelt uses handler mappings to determine the controllers which processes incoming
			requests
			
			specified by use of annotations such as:
				@RequestMapping
				@GetMapping
				@PostMapping
				
		Handler Interceptors
		
			Used to invoke preprocessing and post-processing logic before and after invocation of handler methods
			
		Controllers
			
			Custom controllers written by devs and used for processing requests
			
			uses annotations such as
				@Controller
				@RestController
				
			used to access the application behavior through one or more service interfaces
			
			interprets user input, passes them to a service for implementation, then transforms the service into a GUI
	
		Services
		
			Components coded by the developers
			
			Contains business logic
			
			Uses annotations such as
				@Services
			to identify services
			
		Data Access Objects (DAO) 
		
			Used to do data processing with the underlying data sources
			
			Annotated with
				@Repository
				
		View Resolvers
		
			Components which map view names to views
			
			Assist in rendering models in the browser based on different view technologies
			
			Used by the Dispatcher servlet to invoke the appropriate view components
			
		Views
			
			Render the response data on the UI

	
	
	
